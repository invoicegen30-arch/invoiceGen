// Prisma + Neon (Postgres)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  GBP
  EUR
}

enum InvoiceStatus {
  Draft
  Ready
  Error
  Sent
  Paid
  Overdue
}

// NextAuth models (v5)
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // App-specific fields
  tokenBalance Int       @default(0)
  currency     Currency  @default(GBP)

  company  Company?
  invoices Invoice[]
  ledger   LedgerEntry[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Company {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  vat       String?
  reg       String?
  address1  String?
  city      String?
  country   String?
  iban      String?
  logoUrl   String?
  bankName  String?
  bic       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  number    String   @unique
  date      DateTime
  due       DateTime?
  client    String
  clientMeta Json?
  currency  Currency
  subtotal  Decimal  @db.Decimal(12, 2)
  tax       Decimal  @db.Decimal(12, 2)
  total     Decimal  @db.Decimal(12, 2)
  status    InvoiceStatus @default(Draft)
  createdAt DateTime @default(now())

  items InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Int
  rate        Decimal @db.Decimal(12, 2)
  tax         Int
}

model LedgerEntry {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ts           DateTime  @default(now())
  type         String    // Top-up | Invoice | Adjust
  delta        Int       // tokens +/-
  balanceAfter Int
  currency     Currency?
  amount       Int?
  receiptUrl   String?
  invoiceNumber String?  // Invoice number for Invoice type entries
}
