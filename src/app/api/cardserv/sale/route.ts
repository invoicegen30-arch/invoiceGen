import { NextResponse } from "next/server";
import { db } from "@/lib/db";
import { createCardServOrder } from "@/lib/cardserv";

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ 3DS —ñ –º–∏—Ç—Ç—î–≤–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤.
 */
export async function POST(req: Request) {
  try {
    const body = await req.json();

    // 1Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä —É CardServ
    const saleData = await createCardServOrder(body);

    // 2Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–¥–µ—Ä —É –±–∞–∑—É
    const order = await db.order.create({
      data: {
        userEmail: body.email,
        amount: body.amount,
        currency: body.currency,
        description: body.description,
        tokens: body.tokens || null,
        orderSystemId: saleData.orderSystemId ?? null,
        orderMerchantId: saleData.orderMerchantId,
        status: saleData.orderState || "PROCESSING",
        response: saleData.raw,
      },
    });



    // 3Ô∏è‚É£ –Ø–∫—â–æ redirect —î ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
    if (saleData.redirectUrl) {
      console.log("üí∞ Redirect –æ—Ç—Ä–∏–º–∞–Ω–æ ‚Äî –Ω–∞—Ä–∞—Ö–æ–≤—É—é —Ç–æ–∫–µ–Ω–∏...");

      const user = await db.user.findUnique({
        where: { email: body.email },
      });

      if (user) {
        const tokensToAdd = body.tokens ?? 0;
        const newBalance = user.tokenBalance + tokensToAdd;

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await db.user.update({
          where: { id: user.id },
          data: { tokenBalance: newBalance },
        });

        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å —É Ledger
        await db.ledgerEntry.create({
          data: {
            userId: user.id,
            type: "Top-up",
            delta: tokensToAdd,
            balanceAfter: newBalance,
            currency: user.currency,
            amount: Math.round(body.amount * 100),
          },
        });

        console.log(`‚úÖ Tokens credited: +${tokensToAdd} to ${user.email}`);
      } else {
        console.warn(`‚ö†Ô∏è User not found for email: ${body.email}`);
      }

      // 4Ô∏è‚É£ –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ 3DS
      console.log("üîÅ Redirecting to:", saleData.redirectUrl);
      return NextResponse.redirect(saleData.redirectUrl, 302);
    }

    // 5Ô∏è‚É£ –Ø–∫—â–æ redirect —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ JSON
    return NextResponse.json(
      {
        success: true,
        message: "Redirect URL not ready yet, order saved",
        data: {
          orderId: order.id,
          orderMerchantId: saleData.orderMerchantId,
          orderSystemId: saleData.orderSystemId,
          status: saleData.orderState,
          redirectUrl: saleData.redirectUrl,
        },
      },
      { status: 202 }
    );
  } catch (error: any) {
    console.error("‚ùå CardServ sale error:", error);
    return NextResponse.json(
      { error: error.message || "Payment creation failed" },
      { status: 500 }
    );
  }
}
